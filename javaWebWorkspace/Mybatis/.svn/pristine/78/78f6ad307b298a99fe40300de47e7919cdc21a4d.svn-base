<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，为了对sql语句进行隔离，方便管理 ，mapper开发dao方式， 使用namespace有特殊作用 mapper代理开发时将namespace指定为mapper接口的全限定名 -->

<mapper namespace="com.nocol.pojo.StudentMapper">

	<!-- 列名 property：实体的属性
	        column：表字段的列名（可以是真正列名的别名） 
			id:为实体与表的映射取的唯一标识 -->
	<resultMap type="Student" id="StudentResult">
	
		<!-- id：主键列 ，称为主键 -->
		 <!-- result:普通列（非主键列）的映射配置 -->
		 
		<id property="studId" column="stud_Id" />     
		<result property="name" column="name" />	
		<result property="email" column="email" />
		<result property="dob" column="dob" />
		<result property="pNumber" column="phone"/>
	</resultMap>

	<!-- 在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 mapper.xml以statement为单位管理sql语句 -->

	<!-- id：唯一标识 一个statement #{}：表示 一个占位符，如果#{}中传入简单类型的参数，#{}中的名称随意 
		parameterType：输入参数的类型，通过#{}接收parameterType输入 的参数(完成输入映射) 
		resultType：输出结果 类型，不管返回是多条还是单条，指定单条记录映射的pojo类型(完成输出映射) -->

	<!-- Sql语句不需要分号 -->
	<!--resultType属性值为list集合中的类型即可，这里是map，那么调用该id的方法后的返回类型应该为List<Map<K, V>>   -->
	<select id="findAllStudents" resultType="map">
	
		<!-- SELECT * FROM STUDENTS  使用该条语句查询所有时：只有表中的列和返回类型(单个类型)中属性对应的才能成功赋值，否则为空
		SELECT STUD_ID AS STUDID, NAME, EMAIL,DOB,phone as pNumber 
		FROM STUDENTS-->		
		SELECT STUD_ID AS STUDID, NAME, EMAIL,DOB,phone as pNumber
		FROM STUDENTS	
	</select>
	
	<!-- 返回类型为map时，查询所有不能用*，且不能使用接口方式操作数据库 
	<select id="findAllStudents2"  resultType="map"> 
		SELECT STUD_ID AS STUDID, NAME, EMAIL,DOB,phone as pNumber
		FROM STUDENTS
	</select>
	-->
	
	<select id="findStudentById" parameterType="int" resultType="Student">
		SELECT STUD_ID AS STUDID, NAME, EMAIL,DOB,phone as pNumber
		FROM STUDENTS
		WHERE STUD_ID=#{studId}
	</select>
		
	<insert id="insertStudent" parameterType="Student">
		<!--  <selectKey keyProperty="studId" resultType="int" order="BEFORE"> 
				SELECT my_seq.nextval FROM DUAL 
		</selectKey> -->
		INSERT INTO
		STUDENTS(STUD_ID,NAME,EMAIL,DOB,PHONE)
		VALUES(#{studId},#{name},#{email},#{dob},#{pNumber})
	</insert>
	
	<update id="updateStudent" parameterType="Student">
		<!-- update students set name='nocol' where id=3 -->
	   update students set name=#{name},email=#{email},dob=#{dob},phone=#{pNumber}
	   where stud_id=#{studId}  
	</update>
	
	<delete id="deleteStudent" parameterType="int">
		delete students where stud_id=#{studId}
	</delete>
</mapper> 