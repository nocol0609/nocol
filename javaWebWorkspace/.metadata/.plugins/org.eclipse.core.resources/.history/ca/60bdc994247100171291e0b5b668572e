package com.hbase.test;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map.Entry;
import java.util.NavigableMap;
import java.util.Random;
import java.util.Set;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.client.Table;
import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
import org.apache.hadoop.hbase.filter.FilterList;
import org.apache.hadoop.hbase.filter.PrefixFilter;
import org.apache.hadoop.hbase.filter.SingleColumnValueFilter;
import org.apache.hadoop.hbase.util.Bytes;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * 使用hbase数据库存储用户的电话详单
 * 
 * 并且查询出用户的最近的通话详单
 * 
 * @author 付旺辉
 * @date 2017年7月24日
 * @time 上午10:00:58
 */
public class PhoneList {

	// 读取配置
	private Configuration config;
	// 连接对象
	private Connection conn;
	// 操作DDL
	private Admin admin;
	// 操作DML
	private Table table;

	/**
	 * 获取数据库连接
	 */
	@Before
	public void getConn() {

		try {

			config = new Configuration();
			// 连接zookeeper
			config.set("hbase.zookeeper.quorum", "192.168.44.129");
			// 获取连接
			conn = ConnectionFactory.createConnection(config);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * 创建表
	 * 
	 * type : 主叫或者被叫类型 0主叫,1被叫
	 * 
	 * phone : 对方的号码
	 * 
	 * time : 通话的时间
	 * 
	 */
	@Test
	public void createtable() {

		try {
			// 获取admin
			admin = conn.getAdmin();

			if (admin != null) {
				// 判断要创建的表是否存在，若存在则删除
				if (admin.tableExists(TableName.valueOf("phonelist"))) {
					// 先禁用表
					admin.disableTable(TableName.valueOf("phonelist"));
					// 删除表
					admin.deleteTable(TableName.valueOf("phonelist"));
				}
			}

			// 创建表描述对象
			HTableDescriptor tableDescriptor = new HTableDescriptor(
					TableName.valueOf("phonelist"));

			// 创建列族描述对象
			HColumnDescriptor columnDescriptor = new HColumnDescriptor(
					Bytes.toBytes("cf1"));

			// 启动读缓存
			columnDescriptor.setBlockCacheEnabled(true);

			// 是否加载到内存
			columnDescriptor.setInMemory(true);

			// 设置最大版本数（最小版本数已经确定）
			columnDescriptor.setMaxVersions(5);

			// 将列族对象添加进表描述对象
			tableDescriptor.addFamily(columnDescriptor);

			// 创建表
			admin.createTable(tableDescriptor);

			System.out.println("创建表成功！");

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * 向表中插入数据
	 * 
	 * 二十个电话号码,每个电话100条通话详单
	 * 
	 * @throws Exception
	 */
	@Test
	public void insertData() throws Exception {

		// 获取表对象
		table = conn.getTable(TableName.valueOf("phonelist"));
		Random random = new Random();

		// 电话号码
		String pNum = "";

		// rowkey
		String rowkey = "";

		// 批量插入数据
		List<Put> puts = new ArrayList<Put>();
		Put put = null;

		// 设置时间格式化模式
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		for (int i = 0; i < 20; i++) {
			// 获取用户的电话号码
			pNum = getPhoneNum("186");

			// 为每个号码添加相应的列属性值
			for (int j = 0; j < 100; j++) {

				// 对方号码
				String phone = getPhoneNum("176");
				// 时间
				String dateStr = getDate("2016");
				Date date = format.parse(dateStr);

				/**
				 * 设置rowkey,设计很重要
				 * 
				 * 由于rowkey按照字典序升序排序,所以使用最大的long值减去时间使得查询出来的详单 是以时间的降序排序
				 * 
				 * 查询出来的详单最新数据显示在最前面
				 */
				rowkey = pNum + (Long.MAX_VALUE - date.getTime());

				put = new Put(rowkey.getBytes());

				put.addColumn("cf1".getBytes(), "type".getBytes(),
						(random.nextInt(2) + "").getBytes());
				put.addColumn("cf1".getBytes(), "phone".getBytes(),
						phone.getBytes());
				put.addColumn("cf1".getBytes(), "time".getBytes(),
						Bytes.toBytes(dateStr));

				// 添加进list
				puts.add(put);
			}
		}

		// 批量插入数据
		table.put(puts);

		System.out.println("插入数据成功");

	}

	/**
	 * 直接根据rowkey查询某个用户的通话详单
	 * 
	 * @throws ParseException
	 */
	@Test
	public void scan() throws Exception {
		// 获取表对象
		table = conn.getTable(TableName.valueOf("phonelist"));

		String phoneNum = "18695752530";

		Scan scan = new Scan();

		// 设置时间格式化模式
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		// 设置查询的行键的起始值
		String startRowkey = phoneNum
				+ (Long.MAX_VALUE - format.parse("2016-3-1 00:00:00").getTime());
		scan.setStartRow(startRowkey.getBytes());

		// 设置查询的行键的结束值
		String stopRowkey = phoneNum
				+ (Long.MAX_VALUE - format.parse("2016-10-1 00:00:00").getTime());
		
		scan.setStopRow(stopRowkey.getBytes());
		
		// 得到结果集
		ResultScanner scanner = table.getScanner(scan);

		for (Result result : scanner) {
			showValues(result);
		}
		
		System.out.println("获取数据成功！");
	}

	/**
	 * 查询出某个用户号码的通话详单
	 * 
	 * @throws IOException
	 */
	public void scan1() throws IOException {

		// 获取表对象
		table = conn.getTable(TableName.valueOf("phonelist"));

		// 设置过滤器链
		FilterList list = new FilterList(FilterList.Operator.MUST_PASS_ALL);

		// 设置查询行键的开头
		PrefixFilter prefixFilter = new PrefixFilter("".getBytes());
		list.addFilter(prefixFilter);

		// 设置type为0这个条件,查询出全部的主叫详单
		SingleColumnValueFilter singleColumnValueFilter = new SingleColumnValueFilter(
				"cf1".getBytes(), "type".getBytes(), CompareOp.EQUAL,
				(0 + "").getBytes());
		list.addFilter(singleColumnValueFilter);

		Scan scan = new Scan();

		scan.setFilter(list);


		// 得到结果集
		ResultScanner scanner = table.getScanner(scan);

		// 遍历结果集获取数据
		for (Result result : scanner) {
			showValues(result);
		}
		
		System.out.println("获取数据成功！");
	}

	/**
	 * 获取时间
	 */
	public String getDate(String year) {

		StringBuilder sb = new StringBuilder();
		Random random = new Random();

		// 设置随机的年月日时分秒
		sb.append(year + "-").append((random.nextInt(12) + 1) + "-")
				.append((random.nextInt(29) + 1) + " ")
				.append((random.nextInt(24)) + ":")
				.append((random.nextInt(60)) + ":").append(random.nextInt(60));

		return sb.toString();
	}

	/**
	 * 获取电话号码
	 */
	private String getPhoneNum(String head) {

		Random random = new Random();

		StringBuilder sb = new StringBuilder();
		sb.append(head);

		for (int i = 0; i < 8; i++) {
			sb.append(random.nextInt(10));
		}

		return sb.toString();

	}

	/**
	 * 遍历结果集
	 * 
	 * @param result
	 */
	private void showValues(Result result) {
		// TODO Auto-generated method stub

		// 一个包含列族、列、版本号的嵌套map
		NavigableMap<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> fqvmap = result
				.getMap();
		Set<Entry<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>>> fqventrys = fqvmap
				.entrySet();
		for (Entry<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> fqventry : fqventrys) {
			// 获取列族
			byte[] family = fqventry.getKey();
			// 一个包含列，版本号的嵌套map
			NavigableMap<byte[], NavigableMap<Long, byte[]>> qvmap = fqventry
					.getValue();
			Set<Entry<byte[], NavigableMap<Long, byte[]>>> qventrys = qvmap
					.entrySet();
			for (Entry<byte[], NavigableMap<Long, byte[]>> qventry : qventrys) {
				// 获取列名
				byte[] qulifier = qventry.getKey();
				// 一个key为版本号的map
				NavigableMap<Long, byte[]> vmap = qventry.getValue();
				Set<Entry<Long, byte[]>> ventrys = vmap.entrySet();
				for (Entry<Long, byte[]> ventry : ventrys) {
					// 获取版本号
					Long version = ventry.getKey();
					// 获取数据
					byte[] value = ventry.getValue();
					System.out.println("列族：" + Bytes.toString(family) + " "
							+ "列名：" + Bytes.toString(qulifier) + " " + "版本号："
							+ version + " " + "值：" + Bytes.toString(value));
				}
			}
		}

	}

	/**
	 * 释放资源
	 */
	@After
	public void close() {

		if (admin != null) {
			try {
				admin.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		if (table != null) {
			try {
				table.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		if (conn != null) {
			try {
				conn.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}
}
