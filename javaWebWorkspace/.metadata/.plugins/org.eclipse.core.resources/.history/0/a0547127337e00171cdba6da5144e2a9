import java.util.Arrays;

public class test {

	public static void megeSort(int[] arr, int l, int r) {

		if (l < r) {
			int mid = (l + r) / 2;
			megeSort(arr, l, mid);
			megeSort(arr, mid + 1, r);

			int i = l;
			int j = mid + 1;

			int[] temp = new int[arr.length];
			int k = 0;

			while (i <= mid && j <= r) {

				if (arr[i] < arr[j]) {
					temp[k++] = arr[i++];
				} else {
					temp[k++] = arr[j++];
				}
			}

			while (i <= mid) {
				temp[k++] = arr[i++];
			}

			while (j <= r) {
				temp[k++] = arr[j++];
			}

			for (i = l, k = 0; i <= r; i++, k++) {
				arr[i] = arr[k];
			}
		}

	}

	public static void heapSort(int[] arr) {
		for (int i = arr.length / 2; i >= 0; i--) {
			heapAdjust(arr, i, arr.length);
		}

		for (int i = arr.length - 1; i >= 0; i--) {
			int temp = arr[i];
			arr[i] = arr[0];
			arr[0] = temp;

			heapAdjust(arr, 0, i);
		}
	}

	private static void heapAdjust(int[] arr, int parent, int length) {
		// TODO Auto-generated method stub
		int temp = arr[parent];
		int child = 2 * parent + 1;

		while (child < length) {

			if (child + 1 < length && arr[child + 1] > arr[child]) {
				child++;
			}

			if (temp > arr[child]) {
				break;
			} else {
				arr[parent] = arr[child];
			}

			parent = child;
			child = 2 * parent + 1;
		}
		arr[parent] = temp;
	}

	public static void main(String[] args) {
		int[] arr = { 6, 3, 7, 1, 5, 4, 2 };
		System.out.println(Arrays.toString(arr));
		//heapSort(arr);
		megeSort(arr, 0, 6);
		System.out.println(Arrays.toString(arr));
	}
}
