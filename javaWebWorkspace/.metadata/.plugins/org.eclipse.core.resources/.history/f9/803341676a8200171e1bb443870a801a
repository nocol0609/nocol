package com.nocol.tree;

/**
 * 二叉树
 * 
 * @author Nocol 下午5:05:34
 */
public class Tree {
	// 根节点
	public Node root;

	/**
	 * 插入节点
	 */
	public void insert(long value) {

		// 封装插入的节点
		Node newNode = new Node(value);
		// 引用当前节点
		Node current = root;
		// 引用父节点
		Node parent;
		// 判断root是否为null，即第一次插入的时候
		if (root == null) {
			root = newNode;
			return;
		} else {
			while (true) {
				// 若root不为空，则让当前节点为父节点
				parent = current;
				// 如果新插入的节点比当前节点小，则往左走
				if (value < current.data) {
					// 获取当前节点的左孩子节点
					current = current.leftChild;
					if (current == null) {
						// 若当前节点的左孩子节点为null,则新插入的就为当前节点的左孩子节点
						parent.leftChild = newNode;
						return;
					}
				} else {
					// 获取当前节点的右孩子节点
					current = current.rigthChild;
					if (current == null) {
						// 若当前节点的右孩子节点为null,则新插入的就为当前节点的右孩子节点
						parent.rigthChild = newNode;
						return;
					}
				}
			}
		}

	}

	/**
	 * 查找节点
	 */
	public Node find(long value) {

		// 当前节点的引用,从根节点开始查找
		Node current = root;

		while (current.data != value) {

			if (current.data > value) {
				current = current.leftChild;
			} else {
				current = current.rigthChild;
			}

			if (current == null) {
				return null;
			}
		}
		return current;
	}

	/**
	 * 删除节点
	 */
	public void delete(long value) {

	}
}
