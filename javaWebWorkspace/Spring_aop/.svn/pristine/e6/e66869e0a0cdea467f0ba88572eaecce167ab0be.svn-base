<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd"> <!-- bean definitions here -->
	
	<!--Spring传统aop方式  -->
	
	<!--配置目标对象  -->
	<bean id="OderService" class="com.spring.aop.OderServiceImpl"></bean>
	
	<!--配置自定义的Advice(传统)  --> 
	<bean id="myMethodAdvice" class="com.spring.aop.MyInterceptor"></bean>
	
	<!--aop相关配置  -->
	<!--自动代理（已弃手动代理）  -->
	<aop:config proxy-target-class="false"> <!--  proxy-target-class="true" 使用 cglib 代理-->
	<!-- 
		aop:advisor: 定义spring传统AOP的切面的， 只支持一个PointCut和 一个Advice 
		aop:aspect : 定义AspectJ框架切面的 ，可以包含多个PointCut 和 多个Advice
		aop:pointcut : 切点定义
	-->
		<!--配置切点  -->
		<aop:pointcut expression="execution(* com.spring.aop.OderServiceImpl.*(..))" id="myPoint"/>
		<!--配置切面  -->
		<!--一个通知一个切点  -->
		<aop:advisor advice-ref="myMethodAdvice" pointcut-ref="myPoint"/>
	
	</aop:config>
	
	
	<!--Spring aspectJ方式(xml)实现aop  -->
	<!--配置目标  -->
	<bean id="UserService" class="com.spring.aspectJ.UserService"></bean>
	
	<!--配置切面类  -->
	<bean id="MyAspectJ" class="com.spring.aspectJ.MyAspect"></bean>
	
	<!--aop相关配置  -->
	<aop:config>
		<!--ref引用定义好的切面类  -->
		<aop:aspect ref="MyAspectJ">
			<!--配置切点(通俗指要加入通知的方法，下面指目标类UserService类下的所有方法)  -->
			<aop:pointcut expression="execution(* com.spring.aspectJ.UserService.*(..))" id="myPoint2"/>
			
			<!--配置通知  -->
			
			<!--前置通知 (指在定义的切点（一般是目标类下的方法）前加入切面中定义好的方法（通知）) -->
			<!--一个切点多个通知,下面指在目标类中的每一个方法（切点）执行前增加两个（方法）通知  -->			
<!-- 		<aop:before method="before1" pointcut-ref="myPoint2"/>
			<aop:before method="before2" pointcut-ref="myPoint2"/> 
-->
			
		    <!--后置通知（类似）  -->
<!-- 			<aop:after-returning method="afterReturning1" pointcut-ref="myPoint2"/> -->
			<!--returning 可拿到目标方法返回的值  -->
<!-- 			<aop:after-returning method="afterReturning2" returning="result" pointcut-ref="myPoint2"/>  -->
			
			<!--环绕通知  -->
<!-- 			<aop:around method="around" pointcut-ref="myPoint2"/> -->
			
			<!--抛出通知  -->
			<aop:after-throwing method="afterThrowing" throwing="exception" pointcut-ref="myPoint2"/>
			
			<!--最终通知  -->
			<aop:after method="after" pointcut-ref="myPoint2"/>
			
		</aop:aspect>	
	</aop:config>
	
</beans>